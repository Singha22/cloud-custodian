{
    "status_code": 200,
    "data": {
        "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: AWS CloudFormation template to create a new ECS Fargate First Run stack\nParameters:\n  EcsAmiId:\n    Type: String\n    Description: ECS AMI Id\n  EcsInstanceType:\n    Type: String\n    Description: ECS EC2 instance type\n    Default: t2.micro\n    ConstraintDescription: must be a valid EC2 instance type.\n  KeyName:\n    Type: String\n    Description: Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances\n    Default: ''\n  AsgMaxSize:\n    Type: Number\n    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group\n    Default: '1'\n  IamRoleInstanceProfile:\n    Type: String\n    Description: Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance\n  EcsClusterName:\n    Type: String\n    Description: ECS Cluster Name\n    Default: default\n  EcsPort:\n    Type: String\n    Description: Optional - Security Group port to open on ECS instances - defaults to port 80\n    Default: '80'\n  ElbPort:\n    Type: String\n    Description: Optional - Security Group port to open on ELB - port 80 will be open by default\n    Default: '80'\n  ElbHealthCheckTarget:\n    Type: String\n    Description: Optional - Health Check Target for ELB - defaults to HTTP:80/\n    Default: HTTP:80/\n  TargetGroupName:\n    Type: String\n    Description: The target group name\n    Default: ECSFirstRunTargetGroup\n  SourceCidr:\n    Type: String\n    Description: Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0\n    Default: 0.0.0.0/0\n  EcsEndpoint:\n    Type: String\n    Description: 'Optional - ECS Endpoint for the ECS Agent to connect to'\n    Default: ''\n  CreateElasticLoadBalancer:\n    Type: String\n    Description: 'Optional - When set to true, creates a ELB for ECS Service'\n    Default: 'false'\n  VpcAvailabilityZones:\n    Type: CommaDelimitedList\n    Description: 'Optional - Comma-delimited list of two VPC availability zones in which to create subnets'\n    Default: ''\n  VpcCidrBlock:\n    Type: String\n    Description: Optional - CIDR/IP range for the VPC\n    Default: 10.0.0.0/16\n  SubnetCidrBlock1:\n    Type: String\n    Description: Optional - CIDR/IP range for the VPC\n    Default: 10.0.0.0/24\n  SubnetCidrBlock2:\n    Type: String\n    Description: Optional - CIDR/IP range for the VPC\n    Default: 10.0.1.0/24\n  IsFargate:\n    Type: String\n    Description: Optional - Whether to launch instances and create auto scaling group.\n    Default: 'true'\n  TargetType:\n    Type: String\n    Description: Optional - the ALB target group target type, defaults to ip\n    Default: 'ip'\nConditions:\n  SetEndpointToECSAgent: !Not [!Equals [!Ref 'EcsEndpoint', '']]\n  CreateELB: !Equals [!Ref 'CreateElasticLoadBalancer', 'true']\n  CreateEC2LCWithKeyPair: !Not [!Equals [!Ref 'KeyName', '']]\n  UseSpecifiedVpcAvailabilityZones: !Not [!Equals [!Join ['', !Ref 'VpcAvailabilityZones'],'']]\n  LaunchInstances: !Equals [!Ref 'IsFargate', 'false']\nResources:\n  Vpc:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref 'VpcCidrBlock'\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'VPC']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  PublicSubnetAz1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref 'Vpc'\n      CidrBlock: !Ref 'SubnetCidrBlock1'\n      AvailabilityZone: !If\n       - UseSpecifiedVpcAvailabilityZones\n       - !Select ['0', !Ref 'VpcAvailabilityZones']\n       - !Select\n         - '0'\n         - Fn::GetAZs:\n             !Ref AWS::Region\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'Public Subnet 1']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  PublicSubnetAz2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref 'Vpc'\n      CidrBlock: !Ref 'SubnetCidrBlock2'\n      AvailabilityZone: !If\n       - UseSpecifiedVpcAvailabilityZones\n       - !Select ['1', !Ref 'VpcAvailabilityZones']\n       - !Select\n         - '1'\n         - Fn::GetAZs:\n             !Ref AWS::Region\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'Public Subnet 2']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'InternetGateway']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  AttachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref 'Vpc'\n      InternetGatewayId: !Ref 'InternetGateway'\n  RouteViaIgw:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'Vpc'\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'RouteTable']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  PublicRouteViaIgw:\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref 'RouteViaIgw'\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref 'InternetGateway'\n  PublicSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref 'PublicSubnetAz1'\n      RouteTableId: !Ref 'RouteViaIgw'\n  PublicSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref 'PublicSubnetAz2'\n      RouteTableId: !Ref 'RouteViaIgw'\n  EcsSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: ECS Allowed Ports\n      VpcId: !Ref 'Vpc'\n      SecurityGroupIngress: !If\n        - CreateELB\n        -\n          -\n            IpProtocol: 'tcp'\n            FromPort: !Ref 'EcsPort'\n            ToPort: !Ref 'EcsPort'\n            CidrIp: !Ref 'SourceCidr'\n          -\n            IpProtocol: 'tcp'\n            FromPort: '1'\n            ToPort: '65535'\n            SourceSecurityGroupId: !Ref 'AlbSecurityGroup'\n        -\n          -\n            IpProtocol: 'tcp'\n            FromPort: !Ref 'EcsPort'\n            ToPort: !Ref 'EcsPort'\n            CidrIp: !Ref 'SourceCidr'\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'ECS SecurityGroup']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  AlbSecurityGroup:\n    Condition: CreateELB\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: ELB Allowed Ports\n      VpcId: !Ref 'Vpc'\n      SecurityGroupIngress:\n        - IpProtocol: 'tcp'\n          FromPort: !Ref 'ElbPort'\n          ToPort: !Ref 'ElbPort'\n          CidrIp: !Ref 'SourceCidr'\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'ALB SecurityGroup']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  DefaultTargetGroup:\n    Condition: CreateELB\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      VpcId: !Ref 'Vpc'\n      Port: !Ref 'ElbPort'\n      TargetType: !Ref 'TargetType'\n      Protocol: HTTP\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'TargetGroup']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  EcsElasticLoadBalancer:\n    Condition: CreateELB\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      SecurityGroups:\n        - !Ref 'AlbSecurityGroup'\n      Subnets:\n        - !Ref 'PublicSubnetAz1'\n        - !Ref 'PublicSubnetAz2'\n      Scheme: internet-facing\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'ALB']]\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n  LoadBalancerListener:\n    Condition: CreateELB\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      LoadBalancerArn: !Ref 'EcsElasticLoadBalancer'\n      Port: !Ref 'ElbPort'\n      Protocol: HTTP\n      DefaultActions:\n        - Type: forward\n          TargetGroupArn: !Ref 'DefaultTargetGroup'\n  EcsInstanceLc:\n    Condition: LaunchInstances\n    Type: AWS::AutoScaling::LaunchConfiguration\n    Properties:\n      ImageId: !Ref 'EcsAmiId'\n      InstanceType: !Ref 'EcsInstanceType'\n      AssociatePublicIpAddress: true\n      IamInstanceProfile: !Ref 'IamRoleInstanceProfile'\n      KeyName: !If [CreateEC2LCWithKeyPair, !Ref 'KeyName', !Ref 'AWS::NoValue']\n      SecurityGroups:\n        - !Ref 'EcsSecurityGroup'\n      UserData: !If\n        - SetEndpointToECSAgent\n        - !Base64\n          'Fn::Join':\n            - ''\n            - - |\n                #!/bin/bash\n              - echo ECS_CLUSTER=\n              - !Ref EcsClusterName\n              - ' >> /etc/ecs/ecs.config'\n              - |-\n\n                echo ECS_BACKEND_HOST=\n              - !Ref EcsEndpoint\n              - ' >> /etc/ecs/ecs.config'\n        - !Base64\n          'Fn::Join':\n            - ''\n            - - |\n                #!/bin/bash\n              - echo ECS_CLUSTER=\n              - !Ref EcsClusterName\n              - ' >> /etc/ecs/ecs.config'\n  EcsInstanceAsg:\n    Condition: LaunchInstances\n    Type: AWS::AutoScaling::AutoScalingGroup\n    Properties:\n      VPCZoneIdentifier:\n        - !Join [',', [!Ref 'PublicSubnetAz1', !Ref 'PublicSubnetAz2']]\n      LaunchConfigurationName: !Ref 'EcsInstanceLc'\n      MinSize: '0'\n      MaxSize: !Ref 'AsgMaxSize'\n      DesiredCapacity: !Ref 'AsgMaxSize'\n      Tags:\n        -\n          Key: 'Name'\n          Value: !Join [' ', ['ECS', !Ref 'EcsClusterName', '-', 'EC2 Instance']]\n          PropagateAtLaunch: true\n        -\n          Key: 'Description'\n          Value: !Join [' ', ['Created for ECS cluster', !Ref 'EcsClusterName']]\n          PropagateAtLaunch: true\nOutputs:\n  EcsInstanceAsgName:\n    Condition: LaunchInstances\n    Description: Auto Scaling Group Name for ECS Instances\n    Value: !Ref 'EcsInstanceAsg'\n  EcsElbName:\n    Description: Load Balancer for ECS Service\n    Value: !If [CreateELB, !Ref 'EcsElasticLoadBalancer', '']\n  Version:\n    Description: ECS Cloudformation template version\n    Value: 3.0.0\n",
        "StagesAvailable": [
            "Original",
            "Processed"
        ],
        "ResponseMetadata": {}
    }
}